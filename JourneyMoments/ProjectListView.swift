import SwiftUI
import Photos

struct ProjectListView: View {
    let projects: [Project]
    let onCreateProject: () -> Void
    let onOpenProject: (Project) -> Void
    let onPlayProject: (Project) -> Void
    let onDeleteProject: (Project) -> Void
    let onRenameProject: (Project, String) -> Void
    let onExportProject: (Project) -> Void
    
    @State private var showDeleteAlert = false
    @State private var projectToDelete: Project?
    
    // ÂêçÂâçÂ§âÊõ¥Ê©üËÉΩ„ÅÆÁä∂ÊÖãÁÆ°ÁêÜ
    @State private var showRenameAlert = false
    @State private var projectToRename: Project?
    @State private var newProjectName: String = ""
    
    // „Ç®„ÇØ„Çπ„Éù„Éº„ÉàÁä∂ÊÖãÁÆ°ÁêÜ
    @State private var exportingProjects: Set<Int> = []
    
    var body: some View {
        ZStack {
            // ÁîªÈù¢ÂÖ®‰Ωì„ÅÆÈªíËÉåÊôØ
            Color.black
                .ignoresSafeArea(.all)
            
            VStack(spacing: 0) {
                // „Éò„ÉÉ„ÉÄ„Éº
                headerView
                
                // „Éó„É≠„Ç∏„Çß„ÇØ„Éà‰∏ÄË¶ß or Á©∫Áä∂ÊÖã
                if projects.isEmpty {
                    emptyStateView
                } else {
                    projectListView
                }
            }
        }
        // ÂâäÈô§Á¢∫Ë™ç„Ç¢„É©„Éº„Éà
        .alert("Delete Project", isPresented: $showDeleteAlert) {
            Button("Delete", role: .destructive) {
                if let project = projectToDelete {
                    onDeleteProject(project)
                }
                projectToDelete = nil
            }
            Button("Cancel", role: .cancel) {
                projectToDelete = nil
            }
        } message: {
            if let project = projectToDelete {
                Text("Delete \"\(project.name)\"?\nThis action cannot be undone.")
            }
        }
        // ÂêçÂâçÂ§âÊõ¥„Ç¢„É©„Éº„Éà
        .alert("Rename Project", isPresented: $showRenameAlert) {
            TextField("Project Name", text: $newProjectName)
                .textInputAutocapitalization(.words)
            
            Button("Save") {
                if let project = projectToRename, !newProjectName.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {
                    let trimmedName = newProjectName.trimmingCharacters(in: .whitespacesAndNewlines)
                    onRenameProject(project, trimmedName)
                    print("‚úÖ Project renamed: \(project.name) ‚Üí \(trimmedName)")
                }
                resetRenameState()
            }
            .disabled(newProjectName.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty)
            
            Button("Cancel", role: .cancel) {
                resetRenameState()
            }
        } message: {
            if let project = projectToRename {
                Text("Enter a new name for \"\(project.name)\"")
            }
        }
    }
    
    // MARK: - „Éò„ÉÉ„ÉÄ„Éº
    private var headerView: some View {
        VStack(spacing: 10) {
            Text("ClipFlow")
                .font(.title)
                .fontWeight(.bold)
                .foregroundColor(.white)
            
            Button(action: onCreateProject) {
                HStack {
                    Image(systemName: "plus.circle.fill")
                    Text("New Project")
                }
                .padding(.horizontal, 20)
                .padding(.vertical, 10)
                .background(Color.blue)
                .foregroundColor(.white)
                .cornerRadius(20)
            }
        }
        .padding(.top, 60)
        .padding(.horizontal, 20)
        .padding(.bottom, 20)
    }
    
    // MARK: - Á©∫Áä∂ÊÖã
    private var emptyStateView: some View {
        VStack(spacing: 20) {
            Spacer()
            
            Image(systemName: "video.circle")
                .font(.system(size: 80))
                .foregroundColor(.gray)
            
            Text("No Projects")
                .font(.title2)
                .fontWeight(.semibold)
                .foregroundColor(.white)
            
            Text("Create a new project to start\ncapturing 1-second videos!")
                .font(.body)
                .foregroundColor(.gray)
                .multilineTextAlignment(.center)
                .lineLimit(nil)
            
            Spacer()
        }
        .padding(.horizontal, 40)
    }
    
    // üîß ‰øÆÊ≠£: „Éó„É≠„Ç∏„Çß„ÇØ„Éà‰∏ÄË¶ßÔºà„Éú„Çø„É≥„Çµ„Ç§„Ç∫Áµ±‰∏ÄÔºâ
    private var projectListView: some View {
        List {
            ForEach(projects) { project in
                VStack(alignment: .leading, spacing: 12) {
                    // „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊÉÖÂ†±ÔºàÂêçÂâç„Çø„ÉÉ„Éó„ÅßÁ∑®ÈõÜÂèØËÉΩÔºâ
                    VStack(alignment: .leading, spacing: 4) {
                        // „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂêç„Çí„Çø„ÉÉ„ÉóÂèØËÉΩ„Å´„Åô„Çã
                        Button(action: {
                            print("üè∑Ô∏è Project name tapped: \(project.name)")
                            startRenamingProject(project)
                        }) {
                            HStack {
                                Text(project.name)
                                    .font(.headline)
                                    .fontWeight(.semibold)
                                    .foregroundColor(.white)
                                
                                // Á∑®ÈõÜ„Ç¢„Ç§„Ç≥„É≥Ë°®Á§∫
                                Image(systemName: "pencil")
                                    .font(.caption)
                                    .foregroundColor(.gray)
                                    .opacity(0.7)
                                
                                Spacer()
                            }
                        }
                        .buttonStyle(PlainButtonStyle())
                        
                        HStack {
                            HStack(spacing: 4) {
                                Image(systemName: "video.fill")
                                    .font(.caption)
                                Text("\(project.segmentCount)s")
                                    .font(.caption)
                            }
                            .foregroundColor(.yellow)
                            
                            Spacer()
                            
                            Text(formatDate(project.createdAt))
                                .font(.caption)
                                .foregroundColor(.gray)
                        }
                    }
                    
                    // ‰∏ãÈÉ®„Éú„Çø„É≥„Ç®„É™„Ç¢ÔºàRec | Play | ExportÔºâ
                       HStack(spacing: 0) {
                           // ÊíÆÂΩ±„Éú„Çø„É≥
                           Button {
                               print("üî¥ Record button tapped: \(project.name)")
                               onOpenProject(project)
                           } label: {
                               HStack(spacing: 6) {
                                   Image(systemName: "camera.fill")
                                       .font(.caption)
                                   Text("Rec")
                                       .font(.caption)
                                       .fontWeight(.medium)
                               }
                               .frame(maxWidth: .infinity, minHeight: 40)
                               .background(Color.red)
                               .foregroundColor(.white)
                           }
                           .buttonStyle(PlainButtonStyle())
                           
                           // ÂÜçÁîü„Éú„Çø„É≥
                           Button {
                               print("üîµ Play button tapped: \(project.name)")
                               onPlayProject(project)
                           } label: {
                               HStack(spacing: 6) {
                                   Image(systemName: "play.fill")
                                       .font(.caption)
                                   Text("Play")
                                       .font(.caption)
                                       .fontWeight(.medium)
                               }
                               .frame(maxWidth: .infinity, minHeight: 40)
                               .background(Color.blue)
                               .foregroundColor(.white)
                           }
                           .buttonStyle(PlainButtonStyle())
                           .disabled(project.segmentCount == 0)
                           .opacity(project.segmentCount == 0 ? 0.5 : 1.0)
                           
                           // „Ç®„ÇØ„Çπ„Éù„Éº„Éà„Éú„Çø„É≥
                           Button {
                               print("üü† Export button tapped: \(project.name)")
                               handleExportProject(project)
                           } label: {
                               HStack(spacing: 6) {
                                   if exportingProjects.contains(project.id) {
                                       ProgressView()
                                           .progressViewStyle(CircularProgressViewStyle(tint: .white))
                                           .scaleEffect(0.8)
                                   } else {
                                       Image(systemName: "square.and.arrow.up")
                                           .font(.caption)
                                       Text("Export")
                                           .font(.caption)
                                           .fontWeight(.medium)
                                   }
                               }
                               .frame(maxWidth: .infinity, minHeight: 40)
                               .background(exportingProjects.contains(project.id) ? Color.orange.opacity(0.7) : Color.orange)
                               .foregroundColor(.white)
                           }
                           .buttonStyle(PlainButtonStyle())
                           .disabled(exportingProjects.contains(project.id) || project.segmentCount == 0)
                           .opacity(project.segmentCount == 0 ? 0.5 : 1.0)
                       }
                       .cornerRadius(8)
                       .clipped()
                }
                .padding(16)
                .background(Color(.systemGray6).opacity(0.15))
                .cornerRadius(12)
                .overlay(
                    RoundedRectangle(cornerRadius: 12)
                        .stroke(Color.gray.opacity(0.3), lineWidth: 1)
                )
                .listRowBackground(Color.clear)
                .listRowSeparator(.hidden)
                // „Çπ„ÉØ„Ç§„Éó„Ç¢„ÇØ„Ç∑„Éß„É≥ÔºàÂâäÈô§„ÅÆ„ÅøÔºâ
                .swipeActions(edge: .trailing) {
                    Button("Delete") {
                        print("üîç Delete target: \(project.name)")
                        projectToDelete = project
                        showDeleteAlert = true
                    }
                    .tint(.red)
                }
            }
        }
        .background(Color.black)
        .scrollContentBackground(.hidden)
        .listStyle(PlainListStyle())
    }
    
    // „Ç®„ÇØ„Çπ„Éù„Éº„ÉàÂá¶ÁêÜ
    private func handleExportProject(_ project: Project) {
        // „Ç®„ÇØ„Çπ„Éù„Éº„Éà‰∏≠Áä∂ÊÖã„Å´Ë®≠ÂÆö
        exportingProjects.insert(project.id)
        
        // „Ç®„ÇØ„Çπ„Éù„Éº„ÉàÂÆå‰∫ÜÊôÇ„ÅÆÂá¶ÁêÜ
        Task {
            // „Ç®„ÇØ„Çπ„Éù„Éº„ÉàÂá¶ÁêÜ„ÇíÂÆüË°åÔºà„É°„Ç§„É≥ÁîªÈù¢„Å´ÂßîË≠≤Ôºâ
            onExportProject(project)
            
            // 2ÁßíÂæå„Å´„Ç®„ÇØ„Çπ„Éù„Éº„Éà‰∏≠Áä∂ÊÖã„ÇíËß£Èô§ÔºàÂÆüÈöõ„ÅÆÂÆå‰∫Ü„ÅØÂà•ÈÄîÂá¶ÁêÜÔºâ
            try? await Task.sleep(nanoseconds: 2_000_000_000)
            await MainActor.run {
                exportingProjects.remove(project.id)
            }
        }
    }
    
    // ÂêçÂâçÂ§âÊõ¥Èñ¢ÈÄ£„ÅÆÈñ¢Êï∞
    private func startRenamingProject(_ project: Project) {
        projectToRename = project
        newProjectName = project.name  // ÁèæÂú®„ÅÆÂêçÂâç„ÇíÂàùÊúüÂÄ§„Å®„Åó„Å¶Ë®≠ÂÆö
        showRenameAlert = true
    }
    
    private func resetRenameState() {
        projectToRename = nil
        newProjectName = ""
        showRenameAlert = false
    }

    // formatDateÈñ¢Êï∞
    private func formatDate(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "MM/dd"
        return formatter.string(from: date)
    }
}

// MARK: - ProjectRowViewÔºàÊó¢Â≠ò„ÅÆ„Åæ„Åæ - Êú™‰ΩøÁî®„Å†„Åå‰øùÊåÅÔºâ
struct ProjectRowView: View {
    let project: Project
    let onOpen: () -> Void
    let onPlay: () -> Void
    
    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            // „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊÉÖÂ†±
            VStack(alignment: .leading, spacing: 4) {
                Text(project.name)
                    .font(.headline)
                    .fontWeight(.semibold)
                    .foregroundColor(.white)
                
                HStack {
                    HStack(spacing: 4) {
                        Image(systemName: "video.fill")
                            .font(.caption)
                        Text("\(project.segmentCount)s")
                            .font(.caption)
                    }
                    .foregroundColor(.yellow)
                    
                    Spacer()
                    
                    Text(formatDate(project.createdAt))
                        .font(.caption)
                        .foregroundColor(.gray)
                }
            }
            
            // „Éú„Çø„É≥
            HStack(spacing: 12) {
                // ÊíÆÂΩ±„Éú„Çø„É≥
                Button(action: onOpen) {
                    HStack(spacing: 4) {
                        Image(systemName: "camera.fill")
                            .font(.caption2)
                        Text("Rec")
                            .font(.caption2)
                            .fontWeight(.medium)
                    }
                    .frame(width: 60, height: 32)
                    .background(Color.red)
                    .foregroundColor(.white)
                    .cornerRadius(12)
                }
                
                // ÂÜçÁîü„Éú„Çø„É≥Ôºà„Çª„Ç∞„É°„É≥„Éà„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„ÅøÔºâ
                if project.segmentCount > 0 {
                    Button(action: onPlay) {
                        HStack(spacing: 4) {
                            Image(systemName: "play.fill")
                                .font(.caption2)
                            Text("Play")
                                .font(.caption2)
                                .fontWeight(.medium)
                        }
                        .frame(width: 60, height: 32)
                        .background(Color.blue)
                        .foregroundColor(.white)
                        .cornerRadius(12)
                    }
                }
                
                Spacer()
            }
        }
        .padding(16)
        .background(Color(.systemGray6).opacity(0.1))
        .cornerRadius(12)
        .overlay(
            RoundedRectangle(cornerRadius: 12)
                .stroke(Color.gray.opacity(0.3), lineWidth: 1)
            )
    }
    
    private func formatDate(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateStyle = .short
        formatter.timeStyle = .none
        return formatter.string(from: date)
    }
}

// MARK: - Preview
struct ProjectListView_Previews: PreviewProvider {
    static var previews: some View {
        let sampleProjects = [
            Project(name: "Tokyo Trip", segments: [
                VideoSegment(uri: "sample1", facing: "back", order: 1)
            ])
        ]
        
        ProjectListView(
            projects: sampleProjects,
            onCreateProject: {},
            onOpenProject: { _ in },
            onPlayProject: { _ in },
            onDeleteProject: { _ in },
            onRenameProject: { _, _ in },
            onExportProject: { _ in }
        )
    }
}
